//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 6/24/2015 10:18:58 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace dbContext
{

    [DatabaseAttribute(Name = "d8u6uelvine6d6")]
    [ProviderAttribute(typeof(Devart.Data.PostgreSql.Linq.Provider.PgSqlDataProvider))]
    public partial class dbDataContext : Devart.Data.Linq.DataContext
    {
        public static CompiledQueryCache compiledQueryCache = CompiledQueryCache.RegisterDataContext(typeof(dbDataContext));
        private static MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);
        partial void InsertGenre(Genre instance);
        partial void UpdateGenre(Genre instance);
        partial void DeleteGenre(Genre instance);
        partial void InsertMovieGenre(MovieGenre instance);
        partial void UpdateMovieGenre(MovieGenre instance);
        partial void DeleteMovieGenre(MovieGenre instance);
        partial void InsertMovie(Movie instance);
        partial void UpdateMovie(Movie instance);
        partial void DeleteMovie(Movie instance);

        #endregion

        public dbDataContext() :
        base(GetConnectionString("dbDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        public dbDataContext(MappingSource mappingSource) :
        base(GetConnectionString("dbDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        private static string GetConnectionString(string connectionStringName)
        {
            System.Configuration.ConnectionStringSettings connectionStringSettings = System.Configuration.ConfigurationManager.ConnectionStrings[connectionStringName];
            if (connectionStringSettings == null)
                throw new InvalidOperationException("Connection string \"" + connectionStringName +"\" could not be found in the configuration file.");
            return connectionStringSettings.ConnectionString;
        }

        public dbDataContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public dbDataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public dbDataContext(string connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public dbDataContext(System.Data.IDbConnection connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<Genre> Genres
        {
            get
            {
                return this.GetTable<Genre>();
            }
        }

        public Devart.Data.Linq.Table<MovieGenre> MovieGenres
        {
            get
            {
                return this.GetTable<MovieGenre>();
            }
        }

        public Devart.Data.Linq.Table<Movie> Movies
        {
            get
            {
                return this.GetTable<Movie>();
            }
        }
    }
}

namespace dbContext
{

    /// <summary>
    /// There are no comments for dbContext.Genre in the schema.
    /// </summary>
    [Table(Name = @"public.genre")]
    public partial class Genre : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private string _Name;
        #pragma warning restore 0649

        private EntitySet<MovieGenre> _MovieGenres;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        #endregion

        public Genre()
        {
            this._MovieGenres = new EntitySet<MovieGenre>(new Action<MovieGenre>(this.attach_MovieGenres), new Action<MovieGenre>(this.detach_MovieGenres));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", CanBeNull = false, DbType = "INT4 NOT NULL", IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"""name""", Storage = "_Name", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MovieGenres in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Genre_MovieGenre", Storage="_MovieGenres", ThisKey="Id", OtherKey="GenreId", DeleteRule="NO ACTION")]
        public EntitySet<MovieGenre> MovieGenres
        {
            get
            {
                return this._MovieGenres;
            }
            set
            {
                this._MovieGenres.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_MovieGenres(MovieGenre entity)
        {
            this.SendPropertyChanging("MovieGenres");
            entity.Genre = this;
        }
    
        private void detach_MovieGenres(MovieGenre entity)
        {
            this.SendPropertyChanging("MovieGenres");
            entity.Genre = null;
        }
    }

    /// <summary>
    /// There are no comments for dbContext.MovieGenre in the schema.
    /// </summary>
    [Table(Name = @"public.movie_genre")]
    public partial class MovieGenre : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private int _MovieId;

        private int _GenreId;
        #pragma warning restore 0649

        private EntityRef<Genre> _Genre;

        private EntityRef<Movie> _Movie;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnMovieIdChanging(int value);
        partial void OnMovieIdChanged();
        partial void OnGenreIdChanging(int value);
        partial void OnGenreIdChanged();
        #endregion

        public MovieGenre()
        {
            this._Genre  = default(EntityRef<Genre>);
            this._Movie  = default(EntityRef<Movie>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", CanBeNull = false, DbType = "INT4 NOT NULL", IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MovieId in the schema.
        /// </summary>
        [Column(Name = @"movie_id", Storage = "_MovieId", CanBeNull = false, DbType = "INT4 NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int MovieId
        {
            get
            {
                return this._MovieId;
            }
            set
            {
                if (this._MovieId != value)
                {
                    if (this._Movie.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnMovieIdChanging(value);
                    this.SendPropertyChanging();
                    this._MovieId = value;
                    this.SendPropertyChanged("MovieId");
                    this.OnMovieIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GenreId in the schema.
        /// </summary>
        [Column(Name = @"genre_id", Storage = "_GenreId", CanBeNull = false, DbType = "INT4 NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int GenreId
        {
            get
            {
                return this._GenreId;
            }
            set
            {
                if (this._GenreId != value)
                {
                    if (this._Genre.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnGenreIdChanging(value);
                    this.SendPropertyChanging();
                    this._GenreId = value;
                    this.SendPropertyChanged("GenreId");
                    this.OnGenreIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Genre in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Genre_MovieGenre", Storage="_Genre", ThisKey="GenreId", OtherKey="Id", IsForeignKey=true)]
        public Genre Genre
        {
            get
            {
                return this._Genre.Entity;
            }
            set
            {
                Genre previousValue = this._Genre.Entity;
                if ((previousValue != value) || (this._Genre.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Genre.Entity = null;
                        previousValue.MovieGenres.Remove(this);
                    }
                    this._Genre.Entity = value;
                    if (value != null)
                    {
                        this._GenreId = value.Id;
                        value.MovieGenres.Add(this);
                    }
                    else
                    {
                        this._GenreId = default(int);
                    }
                    this.SendPropertyChanged("Genre");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Movie in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Movie_MovieGenre", Storage="_Movie", ThisKey="MovieId", OtherKey="Id", IsForeignKey=true)]
        public Movie Movie
        {
            get
            {
                return this._Movie.Entity;
            }
            set
            {
                Movie previousValue = this._Movie.Entity;
                if ((previousValue != value) || (this._Movie.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Movie.Entity = null;
                        previousValue.MovieGenres.Remove(this);
                    }
                    this._Movie.Entity = value;
                    if (value != null)
                    {
                        this._MovieId = value.Id;
                        value.MovieGenres.Add(this);
                    }
                    else
                    {
                        this._MovieId = default(int);
                    }
                    this.SendPropertyChanged("Movie");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for dbContext.Movie in the schema.
    /// </summary>
    [Table(Name = @"public.movie")]
    public partial class Movie : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private string _OriginalLanguage;

        private string _OriginalTitle;

        private System.Nullable<System.DateTime> _ReleaseDate;

        private System.Nullable<float> _Popularity;

        private string _Title;

        private System.Nullable<float> _VoteAverage;

        private System.Nullable<int> _VoteCount;
        #pragma warning restore 0649

        private EntitySet<MovieGenre> _MovieGenres;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnOriginalLanguageChanging(string value);
        partial void OnOriginalLanguageChanged();
        partial void OnOriginalTitleChanging(string value);
        partial void OnOriginalTitleChanged();
        partial void OnReleaseDateChanging(System.Nullable<System.DateTime> value);
        partial void OnReleaseDateChanged();
        partial void OnPopularityChanging(System.Nullable<float> value);
        partial void OnPopularityChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnVoteAverageChanging(System.Nullable<float> value);
        partial void OnVoteAverageChanged();
        partial void OnVoteCountChanging(System.Nullable<int> value);
        partial void OnVoteCountChanged();
        #endregion

        public Movie()
        {
            this._MovieGenres = new EntitySet<MovieGenre>(new Action<MovieGenre>(this.attach_MovieGenres), new Action<MovieGenre>(this.detach_MovieGenres));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", CanBeNull = false, DbType = "INT4 NOT NULL", IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OriginalLanguage in the schema.
        /// </summary>
        [Column(Name = @"original_language", Storage = "_OriginalLanguage", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string OriginalLanguage
        {
            get
            {
                return this._OriginalLanguage;
            }
            set
            {
                if (this._OriginalLanguage != value)
                {
                    this.OnOriginalLanguageChanging(value);
                    this.SendPropertyChanging();
                    this._OriginalLanguage = value;
                    this.SendPropertyChanged("OriginalLanguage");
                    this.OnOriginalLanguageChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OriginalTitle in the schema.
        /// </summary>
        [Column(Name = @"original_title", Storage = "_OriginalTitle", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string OriginalTitle
        {
            get
            {
                return this._OriginalTitle;
            }
            set
            {
                if (this._OriginalTitle != value)
                {
                    this.OnOriginalTitleChanging(value);
                    this.SendPropertyChanging();
                    this._OriginalTitle = value;
                    this.SendPropertyChanged("OriginalTitle");
                    this.OnOriginalTitleChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ReleaseDate in the schema.
        /// </summary>
        [Column(Name = @"release_date", Storage = "_ReleaseDate", DbType = "DATE", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> ReleaseDate
        {
            get
            {
                return this._ReleaseDate;
            }
            set
            {
                if (this._ReleaseDate != value)
                {
                    this.OnReleaseDateChanging(value);
                    this.SendPropertyChanging();
                    this._ReleaseDate = value;
                    this.SendPropertyChanged("ReleaseDate");
                    this.OnReleaseDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Popularity in the schema.
        /// </summary>
        [Column(Name = @"popularity", Storage = "_Popularity", DbType = "FLOAT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<float> Popularity
        {
            get
            {
                return this._Popularity;
            }
            set
            {
                if (this._Popularity != value)
                {
                    this.OnPopularityChanging(value);
                    this.SendPropertyChanging();
                    this._Popularity = value;
                    this.SendPropertyChanged("Popularity");
                    this.OnPopularityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Title in the schema.
        /// </summary>
        [Column(Name = @"title", Storage = "_Title", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string Title
        {
            get
            {
                return this._Title;
            }
            set
            {
                if (this._Title != value)
                {
                    this.OnTitleChanging(value);
                    this.SendPropertyChanging();
                    this._Title = value;
                    this.SendPropertyChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for VoteAverage in the schema.
        /// </summary>
        [Column(Name = @"vote_average", Storage = "_VoteAverage", DbType = "FLOAT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<float> VoteAverage
        {
            get
            {
                return this._VoteAverage;
            }
            set
            {
                if (this._VoteAverage != value)
                {
                    this.OnVoteAverageChanging(value);
                    this.SendPropertyChanging();
                    this._VoteAverage = value;
                    this.SendPropertyChanged("VoteAverage");
                    this.OnVoteAverageChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for VoteCount in the schema.
        /// </summary>
        [Column(Name = @"vote_count", Storage = "_VoteCount", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> VoteCount
        {
            get
            {
                return this._VoteCount;
            }
            set
            {
                if (this._VoteCount != value)
                {
                    this.OnVoteCountChanging(value);
                    this.SendPropertyChanging();
                    this._VoteCount = value;
                    this.SendPropertyChanged("VoteCount");
                    this.OnVoteCountChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MovieGenres in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Movie_MovieGenre", Storage="_MovieGenres", ThisKey="Id", OtherKey="MovieId", DeleteRule="NO ACTION")]
        public EntitySet<MovieGenre> MovieGenres
        {
            get
            {
                return this._MovieGenres;
            }
            set
            {
                this._MovieGenres.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_MovieGenres(MovieGenre entity)
        {
            this.SendPropertyChanging("MovieGenres");
            entity.Movie = this;
        }
    
        private void detach_MovieGenres(MovieGenre entity)
        {
            this.SendPropertyChanging("MovieGenres");
            entity.Movie = null;
        }
    }

}
